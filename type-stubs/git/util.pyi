# Stubs for git.util (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import logging
from typing import Any, Optional

import gitdb.util


make_sha = gitdb.util.make_sha
LockedFD = gitdb.util.LockedFD
file_contents_ro = gitdb.util.file_contents_ro
file_contents_ro_filepath = gitdb.util.file_contents_ro_filepath
LazyMixin = gitdb.util.LazyMixin
to_hex_sha = gitdb.util.to_hex_sha
to_bin_sha = gitdb.util.to_bin_sha
bin_to_hex = gitdb.util.bin_to_hex
hex_to_bin = gitdb.util.hex_to_bin


HIDE_WINDOWS_KNOWN_ERRORS: Any

def unbare_repo(func): ...
def rmtree(path): ...
def stream_copy(source, destination, chunk_size: Any = ...): ...
def join_path(a, *p): ...
def to_native_path_windows(path): ...
def to_native_path_linux(path): ...
to_native_path = to_native_path_windows
to_native_path = to_native_path_linux

def join_path_native(a, *p): ...
def assure_directory_exists(path, is_file: bool = ...): ...
def get_user_id(): ...

class RemoteProgress:
    BEGIN: Any = ...
    END: Any = ...
    COUNTING: Any = ...
    COMPRESSING: Any = ...
    WRITING: Any = ...
    RECEIVING: Any = ...
    RESOLVING: Any = ...
    FINDING_SOURCES: Any = ...
    CHECKING_OUT: Any = ...
    STAGE_MASK: Any = ...
    OP_MASK: Any = ...
    DONE_TOKEN: str = ...
    TOKEN_SEPARATOR: str = ...
    re_op_absolute: Any = ...
    re_op_relative: Any = ...
    error_lines: Any = ...
    other_lines: Any = ...
    def __init__(self) -> None: ...
    def new_message_handler(self): ...
    def line_dropped(self, line) -> None: ...
    def update(self, op_code, cur_count, max_count: Optional[Any] = ..., message: str = ...) -> None: ...

class CallableRemoteProgress(RemoteProgress):
    def __init__(self, fn) -> None: ...
    def update(self, *args, **kwargs) -> None: ...

class Actor:
    name_only_regex: Any = ...
    name_email_regex: Any = ...
    env_author_name: str = ...
    env_author_email: str = ...
    env_committer_name: str = ...
    env_committer_email: str = ...
    conf_name: str = ...
    conf_email: str = ...
    name: Any = ...
    email: Any = ...
    def __init__(self, name, email) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...
    @classmethod
    def committer(cls, config_reader: Optional[Any] = ...): ...
    @classmethod
    def author(cls, config_reader: Optional[Any] = ...): ...

class Stats:
    total: Any = ...
    files: Any = ...
    def __init__(self, total, files) -> None: ...

class IndexFileSHA1Writer:
    f: Any = ...
    sha1: Any = ...
    def __init__(self, f) -> None: ...
    def write(self, data): ...
    def write_sha(self): ...
    def close(self): ...
    def tell(self): ...

class LockFile:
    def __init__(self, file_path) -> None: ...
    def __del__(self) -> None: ...

class BlockingLockFile(LockFile):
    def __init__(self, file_path, check_interval_s: float = ..., max_block_time_s: Any = ...) -> None: ...

class IterableList(list):
    def __new__(cls, id_attr, prefix: str = ...): ...
    def __init__(self, id_attr, prefix: str = ...) -> None: ...
    def __contains__(self, attr): ...
    def __getattr__(self, attr): ...
    def __getitem__(self, index): ...
    def __delitem__(self, index) -> None: ...

class Iterable:
    @classmethod
    def list_items(cls, repo, *args, **kwargs): ...
    @classmethod
    def iter_items(cls, repo, *args, **kwargs) -> Any: ...

class NullHandler(logging.Handler):
    def emit(self, record) -> None: ...
